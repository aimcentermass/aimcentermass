def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))

# wondering the syntax for this import format
#__import__()

#this python sketch is for understanding how to work with date and time. The important thing to remember is there is naïve and aware date and time.

import datetime
# pytz is a time zone addition recommended by python
import pytz

# give daytime integers and don't use the leading zero.

inf = datetime.datetime(2019, 3, 29, 9, 30, 40, 10000)
print(inf)
print(inf.date())
print(inf.time())

# uses ymd format, this example fed integers.
dte = datetime.date(2019, 3, 29)
print("dates you want?")

print(datetime.date(2019, 3, 29))
print("variable dte == ", dte)
print("variable dte year == ", dte.year)
print("variable dte month == ", dte.month)
print("variable dte day == ", dte.day)

tday = datetime.date.today()
print('today is ', tday, '.', 'see error here')
print('today is {0}.'.format(tday))
print("today is day of the week", tday.weekday())
print("today is isoweekday", tday.isoweekday())

#create your own time with naive info
create_time = datetime.time(9, 30, 40, 100000)
print("I created my my own time", create_time)
print("I created my own time just hour", create_time.hour)

#create a date delta, and if we Add or subtract this from a date we get another date
tdelta = datetime.timedelta(days=7)
print(tdelta, 'time delta??')
print(tday)
another_date = tday + tdelta
print("This is a date computed with a time delta", another_date)

# difference between two dates, this gives a time delta.  and if you don't want the time portion of it you add a.days. but it will remove all units.
dif = dte - tday
print (dif)
print("This is a date difference computed from adding or subtracting two dates", dif)

print("This is a date difference computed from adding or subtracting two dates", dif.days)

tmrrow = dte.day + 1
print("This is adding a day", tmrrow)

#dottoday has no Time zone below. Now allows you to put in a time zone if you like right now there is none.  UTC allows you to put in time zone related to UTC right now it is also set to none

dt_today = datetime.datetime.today()
dt_now = datetime.datetime.now()
dt_utc = datetime.datetime.utcnow()

#creating a date from passport data
passport_year = 2016
passport_month = 11
passport_day = 21
#test = datetime.date.timetuple() how does this work?

check = datetime.date(passport_year, passport_month, passport_day)
print('ymd tuple hope-  ', check)

print(dt_today)
print(dt_now)
print(dt_utc)

# now working with timezones and pytz.  it will add a +00:00 for timezone info
ddt = datetime.datetime(2018, 12, 5, 9, 30, 45, tzinfo=pytz.utc)
print(ddt)

ddt_now = datetime.datetime.now(tz=pytz.UTC)
print(ddt_now)

ddt_now_cntl = ddt_now.astimezone(pytz.timezone('US/Central'))
print(ddt_now_cntl)

#below is a one step central timexone a concatenation of the previous 2
ddt_now_cntl2 = datetime.datetime.now(tz=pytz.UTC).astimezone(
    pytz.timezone('US/Central'))
print(ddt_now_cntl2)

# for list of all timezones
#for tz in pytz.all_timezones:
#       print(tz)

local_time = datetime.datetime.now()
print(local_time)

print(local_time.strftime('%B %d, %Y'))

# make time from date string
date_string = 'March 29, 2018'
new_time = datetime.datetime.strptime(date_string, '%B %d, %Y')
print(new_time)

# attempting to manipulate year does not work
#print(tmrrow.year)
#following throws error
#three_days_from_now = dte + 3
#print(three_days_from_now)


def is_day_a_friday(year, month, day):
    tested_day = datetime.date(year, month, day)
    day_o_week = tested_day.isoweekday()
    if day_o_week == 6:
        return (tested_day, True)
    else:
        return (tested_day, False)


date_day = is_day_a_friday(2018, 3, 24)
print('Is', date_day[0], 'a friday?', date_day[1])

day_of_month = datetime.date(2018, 3, 24)
print(day_of_month.day)


def is_day_last_friday_of_month(year, month, day):
    tested_day = datetime.date(year, month, day)
    day_o_week = tested_day.isoweekday()
    if day_o_week == 6:
        return (tested_day, True)
    else:
        return (tested_day, False)


date_day = is_day_last_friday_of_month(2018, 3, 24)
print('Is', date_day[0], 'a friday?', date_day[1])

usr = input("what is your name? ")
print(usr)


# #another version to open a file and make a copy of it even if really big file. but if it is not a text file needto append a "b" after the r and w file type so that the opening is done in binary mode
# with open('chad_test.txt', 'r') as read_file:
#     with open('chad_test_copy.txt', 'w') as write_file:
#         for line in read_file:
#             write_file.write(line)

# #You can also break this down by introducing a chunk size and for that you can go to the end of the video in YouTube from corey schafer april 29, 2016

test = {
    7, -5, -3000, 3, 78, 4, 32, 777, 8, 90, 45, 3, 4, 5, 2, 7, 9, 67, 556, 67
}
print(min(test))
print(max(test))

class Question:
  def __init__(self, prompt, answer):
    self.prompt = prompt
    self.answer = answer

question_prompt_list = [
  "What color are apples?\n(a) Red/Green\n(b) Orange",
  "What color are bananas?\n(a) Red/Green\n(b) Yellow",
]

questions = [
        Question(question_prompt_list[0], "a"),
        Question(question_prompt_list[1], "b"),
]

def run_quiz(questions):
        score = 0
        for question in questions:
                answer = input(question.prompt)
                if answer == question.answer:
                        score += 1
        print("you got", score, "out of", len(questions))

run_quiz(questions)

# classes, is a blueprint for something like employees in a company or your contacts on your phone.  
#each employee is an instance of the class employee
# when you create an instant you can leave off self so you just put in the other parameters
# attributes of a class like name          
#instance variables are unique to each instance
#self is the class instance
#data are attributes, 
#functions are methods to be seen they need to be in the class - staic methods

# class variables are shared among all instances

# the namespace is the dunder dict

#working on classes and instances of classes
# the init method is to initialise the instance
#don't forget about putting in self!'
""" init is an initializer aka constructor"""
"""if the init has values you must initialize with by giving those types of values"""

#Need to figure out how to get the named copy_methods into classes. these are the dunder methods. Class local references, which is the propety decorator      


class Employee:
# placing variables above the init makes the class variables apply to the class
    num_of_emps = 1
    raise_amt = 1.04
    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.email = first + '.' + last + '@email.com'
        self.pay = pay

        Employee.num_of_emps += 1

    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)

#special methods
    def __repr__(self):
        return "Employee('{}', '{}', {})".format(self.first, self.last, self.pay)

    def __str__(self):
        return '{} - {}'.format(self.fullname(), self.email)

# using the @ symbol makes it a class method called a decorator. use 'cls' instead of 'self'
    @classmethod
    def set_raise_amt(cls, amount):
        cls.raise_amt = amount


# alternative constructor, when constructor wars, everyone should win,provide altenative constructors, but don't forget to call it from class
    @classmethod
    def employee_from_string(cls, emp_str):
        first, last, pay = emp_str.split('-')
        return cls(first, last, pay)

#if your function does not access the class or an instance you should make it a class method,  this attaches function to a class. improves find ability and make sure that people use it in the appropriate context
    @staticmethod
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True
# following class is a subclass of employee see how it doesn't call self'
class Developer(Employee):
        #this raise amount will only apply to the devrloper subclass
        raise_amount = 1.5

# want to set up inheritance - two main ways
        def __init__(self, first, last, pay, prog_lang):
                super().__init__(first, last, pay)
                #Employee.__init__(self, first, last, pay)
                self.prog_lang = prog_lang

class Manager(Employee):

        def __init__(self, first, last, pay, employees=None):
                super().__init__(first, last, pay)
                if employees is None:
                        self.employees = []
                else:
                        self.employees = employees

        def add_emp(self,emp):
                if emp not in self.employees:
                        self.employees.append(emp)

        def remove_emp(self,emp):
                if emp in self.employees:
                        self.employees.remove(emp)

        def print_emps(self):
                for emp in self.employees:
                        print('Reports of ', self.fullname(),  ': ', emp.fullname())

print('chuckle')
print(int.__add__(1,2))
print(str.__add__('a', 'b'))


dev_1 = Developer('Corey', 'Schafer', 50005, 'python')
dev_2 = Developer('Test', 'Employee', 60005, 'html')
emp_1 = Employee('Corey', 'Schaferr', 50000)
emp_2 = Employee('Test', 'johnson', 60000)
#this is a class method so by default it's the class and so you can just put in the amount.
print(emp_1.first, 'first nsme')
mgr_1 = Manager('Nancy', 'Henderson', 345475, [dev_1, dev_2])
print('chappy')
print(isinstance(mgr_1, Developer))
print(issubclass(Developer, Employee))

#errorprint(mgr_1.employees(), 'hmmmm')
mgr_1.print_emps()
print(dev_1.email, 'dev_1 email where only thing in developer class is pass!  ')
Employee.set_raise_amt(1.15)
#print(help(Employee))
#method resolution analyzer
print('chaz')
print(repr(emp_1), '...__repr__')
print(str(emp_1), '...__str__')
print(Employee.raise_amt)
print(emp_1.raise_amt)
print(emp_2.raise_amt)
dev_1.apply_raise()
print(dev_1.pay)
print("${0:,.0f}".format(dev_1.pay))
print(emp_1.__dict__)
emp_str_1 = 'John-Doe-70000'
emp_str_2 = 'Steve-Smith-30000'
emp_str_3 = 'Jane-Doe-90000'

print('two ways for full name of emplyee next:')
x = Employee.fullname(emp_1)
y = emp_2.fullname()
print(x)
print(y)
first, last, pay = emp_str_1.split('-')

#new_emp_1 = Employee(first, last, pay)
new_emp_1 = Employee.employee_from_string(emp_str_1)

print('employee set up from an inputted string follows:')
print(new_emp_1.email)
print(new_emp_1.pay)

import datetime
my_date = datetime.date(2016, 7, 11)
today = datetime.date.today()

print('static method for employee class:')
print(Employee.is_workday(my_date))
print(Employee.is_workday(today))

print(Employee.fullname(emp_1))
print(emp_1.fullname())
print(emp_1.pay)
#print(help(Developer))
print(Employee.fullname(emp_2))


#new class

class gun:
        def __init__(self, mfr, model, caliber, color):
                self.mfr = mfr
                self.model = model
                self.caliber = caliber
                self.color = color

#__repr__ meant to be unambiguous and in a perfect world executable by itself
        def __repr__(self):
                return '{self.__class__.__name__}({self.mfr}, {self.model}, {self.caliber}, {self.color})'.format(self=self)

#__str__ meant to be readable for a person
        def __str__(self):
                return 'I have a {self.mfr} {self.model}. It is in {self.caliber} mm.'.format(self=self)



my_gun = gun('Glock', '17', 9, 'black')
my_gun2 = gun('Smith & Wesson', 'Shield', 9, '')
print('chad and gunsie')
my_gun #nothing happens
print('<', my_gun, '>')
#print(help(my_gun))
var1 = '{}'.format(my_gun)
print('var1' , var1, 'var1')
my_gun
#str(my_gun)
#print(help(my_gun))
repr(my_gun)
print('this is a repr of class gun: ', repr(my_gun))
print('this is a str of class gun: ', str(my_gun))
print('hello')
print(my_gun)
print('goodbye')
print(my_gun2)
print(repr(my_gun2))

bb = gun
# bb is an "instance" of gun
# bb is an object of gun
bb.bullet_type = 'round'


class user:
        pass

user1 = user()
user1.first_name = 'bubba'
user1.last_name = 'johnson'
first_name = 'clark'
last_name = 'griswold'
user1.age = 33
user2 = user()
user2.favorite_book = 'all creatures great and small'

print(user1.first_name)
print(first_name)
print(user1.first_name, user1.last_name)



class MyClass:
        """A simple example class"""
        i = 12345

        def f(self):
                return 'hello world'

        def gg(number):
                result = number * 5
                return result


print(MyClass.i)
print(MyClass.f)
a = MyClass
print(a, '= that was aAAAAAAAAAAA')
#print(a.i()) #TypeError: 'int' object is not callable
print(a.i) # i is in integer so I get a number
print(a.f, 'hmmm')
a.f(a)
b = a.f(a)
print(b)
#error print(a.f())
print(a.f(MyClass))
print(MyClass.__doc__)
print(MyClass.__repr__)

x = MyClass()
z = x.f
print(z)

zz = MyClass()
#ss = zz.gg(5)
#zz.gg(5)
#print(ss)

ppp = MyClass.gg(3455)
print(ppp)


import math

class Bag:
        def __init__(self):
                self.data = [1]

        def add(self, x):
                self.data.append(x)

        def addtwice(self, x):
                self.add(x)
                self.add(x)

x = Bag()
print(x, '<---- this is x')
x.add(5)
z = x.addtwice(6)
print(x.data)
# error print(y.data)
#print(y)
print(z)
print(Bag())

class Circle (object):

        def __init__(self, radius):
                self.radius = radius
                self.area = 3.14 * radius*radius

        def area(self):
                return math.pi * self.radius ** 2

my_circle = Circle(2)
y = my_circle.area
print(y)
#print(my_circle.area())
print(my_circle.radius)


class Complex:
    def __init__(self, realpart, imagpart, cnter):
        self.r = realpart
        self.i = imagpart
        self.counter = cnter

x = Complex(4, -3.5, 1)

x.counter = 1
while x.counter < 100:
        x.counter = x.counter * 2
        print(x.counter)
print(x.counter)
del x.counter
print ('done')

def foo(required, *args, **kwargs):
  print("Required argument:", required)
  if args:
    print("Positional argument:", args)
  if kwargs:
    print("keyword argument:", kwargs)

#foo() missing the required positional argument
foo("chap")
foo("XHp", 1, 2, 3)
foo(5)
foo("chappy", 4, 5, "chadd", 1, "string", key_2 = 5, key_0 = "another string", key_1 = 5678)


#we can write wrapper functions but remember qwargs can be changed in place because they are a dictionary, the args are tuples and must be created anew as they are imutable.  This is a dangerous way but sometimes useful to wrap a library.
def foo_1(x, *args, **kwargs):
  kwargs['name'] = "Alice"
  new_args = args, ("extra", )
  foo(x, *new_args, **kwargs)


  foo("chap")
foo_1("XHp", 1, 2, 3)
foo_1(5)
foo_1("chappy", 4, 5, "chadd", 1, "string", key_2 = 5, key_0 = "another string", key_1 = 5678)

class Car:
  def __init__(self, color, mileage):
    self.color = color
    self.mileage = mileage

class AlwaysBlueCar(Car):
  def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.color = 'blue'

my_car = Car('red', 120000)
print(my_car)
print(my_car.color)
my_blue_car = AlwaysBlueCar('red', 140000)
print(my_blue_car)
print(my_blue_car.color)






teams = list()
scores = list()

#adding a team
if loop=="1":
    team_name = input("Enter a team name: ")
    print ("This team is succesfully added!")
    teams.append(team_name)

#selecting the team by user input
elif loop=="4":
   test = input("Enter a team name: ")
   if test in list(teams):
       score_team = int(input("How many points does this team get? "))
       scores.append(score_team)
   else:
       print("Sorry, thats not a valid team name!")   